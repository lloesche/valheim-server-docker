#!/bin/bash

# Include defaults and common functions
. /usr/local/etc/valheim/defaults
. /usr/local/etc/valheim/common

export SteamAppId=892970

valheim_server_pid=-1
valheim_server_pidfile=/var/run/valheim-server.pid
timeout=20
kill_signal=TERM


if [ "$VALHEIM_PLUS" = true ]; then
    cd "$vp_install_path"
    rm -rf "$vp_install_path.old"
    export DOORSTOP_ENABLE=TRUE
    export DOORSTOP_INVOKE_DLL_PATH="./BepInEx/core/BepInEx.Preloader.dll"
    export DOORSTOP_CORLIB_OVERRIDE_PATH="./unstripped_corlib"
    export LD_LIBRARY_PATH="$vp_install_path/linux64/:$vp_install_path/doorstop_libs/"
    export LD_PRELOAD=libdoorstop_x64.so
    valheim_server="$vp_install_path/valheim_server.x86_64"
else
    cd "$valheim_install_path"
    export LD_LIBRARY_PATH="$valheim_install_path/linux64/"
    valheim_server="$valheim_install_path/valheim_server.x86_64"
fi

main() {
    wait_for_server_download
    run_server
}

wait_for_server_download() {
    while :; do
        if [ -f "$valheim_server" ]; then
            break
        else
            echo "Valheim Server is not yet downloaded - waiting"
            sleep 10
        fi
    done
}

ensure_permissions_after_start() {
    while :; do
        if [ -f "/config/adminlist.txt" ]; then
            ensure_permissions
            break
        else
            sleep 5
        fi
    done
}

run_server() {
    echo "Running Valheim Server"
    "$valheim_server" -nographics -batchmode -name "$SERVER_NAME" -port $SERVER_PORT -world "$WORLD_NAME" -password "$SERVER_PASS" -public $SERVER_PUBLIC > >(filter stdout)  2> >(filter stderr >&2) &
    valheim_server_pid=$!
    unset LD_LIBRARY_PATH
    unset LD_PRELOAD
    echo $valheim_server_pid > "$valheim_server_pidfile"
    ensure_permissions_after_start &
    wait
}

filter() {
    unset LD_LIBRARY_PATH
    unset LD_PRELOAD
    case $1 in
        stdout)
            log_filter=$SERVER_LOG_STDOUT_FILTER
            ;;
        stderr)
            log_filter=$SERVER_LOG_STDERR_FILTER
            ;;
    esac
    eval $log_filter
}

shutdown() {
    unset LD_LIBRARY_PATH
    unset LD_PRELOAD
    if [ $valheim_server_pid -eq -1 ]; then
        echo "Valheim server is not running yet - aborting startup"
        exit
    fi
    echo "Shutting down Valheim Server with PID $valheim_server_pid"
    kill -INT $valheim_server_pid
    shutdown_timeout=$(($(date +%s)+$timeout))
    while [ -d "/proc/$valheim_server_pid" ]; do
        if [ $(date +%s) -gt $shutdown_timeout ]; then
            shutdown_timeout=$(($(date +%s)+$timeout))
            echo "Timeout while waiting for server to shutdown - sending SIG$kill_signal to PID $valheim_server_pid"
            kill -$kill_signal $valheim_server_pid
            case "$kill_signal" in
                INT)
                    kill_signal=TERM
                    ;;
                *)
                    kill_signal=KILL
            esac
        fi
        echo "Waiting for Valheim Server with PID $valheim_server_pid to shutdown"
        sleep 3
    done
    if [ -f "$valheim_server_pidfile" ]; then
        pid_from_pidfile=$(< "$valheim_server_pidfile")
        if [ "$pid_from_pidfile" = "$valheim_server_pid" ]; then
            echo "Removing $valheim_server_pidfile"
            rm -f "$valheim_server_pidfile"
        fi
    fi
    echo "Shutdown complete"
    exit
}

trap shutdown SIGINT SIGTERM
main
