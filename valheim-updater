#!/bin/bash
# valheim-updater runs on startup and
# periodically checks for server updates.
# It is also responsible for (re)starting
# the valheim-server service.

# Include defaults
. /usr/local/etc/valheim/defaults
. /usr/local/etc/valheim/common

debug "Running Valheim Server updater as user $USER uid $UID"
cd /opt/steamcmd || fatal "Could not cd /opt/steamcmd"
pidfile=$valheim_updater_pidfile
just_started=true
next_update=$(date +%s)
run=true


main() {
    if (set -o noclobber; echo $$ > "$pidfile") 2> /dev/null; then
        trap update_now SIGHUP
        trap shutdown SIGINT SIGTERM
        trap 'error_handler $? $LINENO $BASH_LINENO "$BASH_COMMAND" $(printf "::%s" ${FUNCNAME[@]}); trap - ERR' ERR
        while [ $run = true ]; do
            ensure_permissions
            pre_update_check_hook
            update
            post_update_check_hook
            check_server_restart
            next_update=$(($(date +%s)+UPDATE_INTERVAL))
            while [ $run = true ] && [ "$(date +%s)" -lt $next_update ]; do
                sleep 5
            done
        done
    else
        info "Found existing PID file - checking process"
        check_lock $pidfile
    fi
}


update() {
    local logfile
    logfile="$(mktemp)"
    info "Downloading/updating/validating Valheim server from Steam"
    download_valheim
    rsync -a --itemize-changes --delete --exclude server_exit.drp --exclude steamapps "$valheim_download_path/" "$valheim_install_path" | tee "$logfile"
    if grep '^[*>]' "$logfile" > /dev/null 2>&1; then
        info "Valheim Server was updated - restarting"
        check_valheim_plus updated
        echo restart > "$valheim_restartfile"
    else
        info "Valheim Server is already the latest version"
        check_valheim_plus just_started
        if [ $just_started = true ]; then
            echo start > "$valheim_restartfile"
        fi
    fi
    just_started=false
    rm -f "$logfile"
}


check_valheim_plus() {
    if [ "$VALHEIM_PLUS" = true ]; then
        debug "ValheimPlus is enabled - running updater"
        if [ "$1" = updated ]; then
            info "Valheim Server was updated from Steam - signaling ValheimPlus updater to merge updated files"
            touch "$vp_mergefile"
        fi
        /usr/local/bin/valheim-plus-updater
    else
        if [ "$1" = updated ] && [ -d "$vp_install_path" ]; then
            debug "ValheimPlus currently disabled but previously installed - keeping installation fresh"
            debug "If this is unwanted remove $vp_install_path"
            touch "$vp_mergefile"
            /usr/local/bin/valheim-plus-updater
        fi
    fi
}


download_valheim() {
    # shellcheck disable=SC2086
    /opt/steamcmd/steamcmd.sh +login anonymous +force_install_dir "$valheim_download_path" +app_update 896660 $STEAMCMD_ARGS +quit
}


check_server_restart() {
    local mode
    # The control file $valheim_restartfile is either created
    # by update() if Valheim is being installed for the first
    # time or has been updated, or by valheim-plus-updater if
    # a new version of the mod has been downloaded.
    if [ -f "$valheim_restartfile" ]; then
        mode=$(< "$valheim_restartfile")
        rm -f "$valheim_restartfile"

        case "$mode" in
                start|restart)
                    ;;
                *)
                    mode=restart
        esac

        [ "$mode" = restart ] && pre_restart_hook
        supervisorctl "$mode" valheim-server
        [ "$mode" = restart ] && post_restart_hook
    fi
}


pre_restart_hook() {
    if [ -n "$PRE_RESTART_HOOK" ]; then
        info "Running pre restart hook: $PRE_RESTART_HOOK"
        eval "$PRE_RESTART_HOOK"
    fi
}


post_restart_hook() {
    if [ -n "$POST_RESTART_HOOK" ]; then
        info "Running post restart hook: $POST_RESTART_HOOK"
        eval "$POST_RESTART_HOOK"
    fi
}


pre_update_check_hook() {
    if [ -n "$PRE_UPDATE_CHECK_HOOK" ]; then
        info "Running pre update check hook: $PRE_UPDATE_CHECK_HOOK"
        eval "$PRE_UPDATE_CHECK_HOOK"
    fi
}


post_update_check_hook() {
    if [ -n "$POST_UPDATE_CHECK_HOOK" ]; then
        info "Running post update check hook: $POST_UPDATE_CHECK_HOOK"
        eval "$POST_UPDATE_CHECK_HOOK"
    fi
}


# This is a signal handler registered to SIGHUP
update_now() {
    debug "Received signal to check for update"
    next_update=0
}


shutdown() {
    clear_lock "$pidfile"
    run=false
}


main
