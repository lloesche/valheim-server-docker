#!/bin/bash
# valheim-plus-updater is being called by
# valheim-updater when $VALHEIM_PLUS=true
# It downloads the ValheimPlus mod and merges
# the downloaded archive with the vanilla
# Valheim server into /opt/valheim/plus

# Include defaults and common functions
. /usr/local/etc/valheim/defaults
. /usr/local/etc/valheim/common

main() {
    create_directory_structure
    check_for_update
}


create_directory_structure() {
    mkdir -p "$vp_download_path" "$vp_install_path"
}


check_for_update() {
    cd "$vp_download_path" || fatal "Could not cd $vp_download_path"
    local api_response
    local download_url
    local remote_updated_at
    local remote_size
    if ! api_response=$(curl -sfSL https://api.github.com/repos/valheimPlus/ValheimPlus/releases/latest); then
        fatal "Error: could not retrieve ValheimPlus release info from Github API"
    fi
    api_response=$(jq -r ".assets[] | select(.name == \"$vp_zipfile\")" <<< "$api_response" )
    download_url=$(jq -r  ".browser_download_url" <<< "$api_response" )
    remote_updated_at=$(jq -r  ".updated_at" <<< "$api_response" )
    remote_size=$(jq -r  ".size" <<< "$api_response")

    if [ -f "$vp_zipfile" ] && [ -f "$vp_zipfile.updated_at" ]; then
        local_updated_at=$(< "$vp_zipfile.updated_at")
        local_size=$(stat --format="%s" "$vp_zipfile")
        if [ "$local_updated_at" = "$remote_updated_at" ] && [ "$local_size" = "$remote_size" ]; then
            debug "Local ValheimPlus archive is identical to remote archive - no update required"
        else
            info "Local ValheimPlus archive with size $local_size and update date $local_updated_at differs from remote size $remote_size and date $remote_updated_at - updating"
            prepare_valheim_plus "$download_url" "$remote_updated_at"
        fi
    else
        info "Fresh ValheimPlus install"
        prepare_valheim_plus "$download_url" "$remote_updated_at"
    fi

    # The control file $vp_mergefile is either created
    # in prepare_valheim_plus() if ValheimPlus is being installed for
    # the first time or an update is available, or
    # it is created by valheim-updater if a Valheim server update
    # was downloaded and the mod needs to be applied to it.
    if [ -f "$vp_mergefile" ]; then
        info "Valheim dedicated server or ValheimPlus got updated - merging installation files"
        rm -f "$vp_mergefile"
        merge_valheim_plus
    fi
}


prepare_valheim_plus() {
    local download_url="$1"
    local updated_at="$2"
    download_valheim_plus "$download_url" "$updated_at" \
        && extract_valheim_plus \
        && touch "$vp_mergefile"
}


merge_valheim_plus() {
    debug "Merging Valheim server and ValheimPlus mod"
    # remove any old ValheimPlus install directories
    rm -rf "$vp_install_path.tmp" "$vp_install_path.old"
    # create a new install directory where we will stage the new version
    mkdir -p "$vp_install_path.tmp"
    # rsync all Valheim dedicated server files
    rsync -a --itemize-changes --exclude server_exit.drp --exclude steamapps "$valheim_download_path/" "$vp_install_path.tmp"
    # rsync all ValheimPlus mod files on top of the dedicated server files
    rsync -a --itemize-changes "$vp_download_path/extracted/" "$vp_install_path.tmp"
    # if /config/valheimplus/ does not exist copy the default config from the ZIP archive
    if [ ! -d "$vp_config_path" ] && [ -d "$vp_install_path.tmp/BepInEx/config" ]; then
        cp -a "$vp_install_path.tmp/BepInEx/config" "$vp_config_path"
        # generate config from env variables
        write_valheim_plus_config
    fi
    # always copy the config that came with the latest ZIP archive to valheim_plus.cfg.default
    if [ -f "$vp_install_path.tmp/BepInEx/config/valheim_plus.cfg" ]; then
        cp -f "$vp_install_path.tmp/BepInEx/config/valheim_plus.cfg" "$vp_config_path/valheim_plus.cfg.default"
    fi
    # ensure config file permissions
    ensure_permissions
    # remove the config folder within the server directory and symlink it to /config
    rm -rf "$vp_install_path.tmp/BepInEx/config"
    ln -s "$vp_config_path" "$vp_install_path.tmp/BepInEx/config"
    # move an existing copy of ValheimPlus to the .old extension
    if [ -d "$vp_install_path" ]; then
        mv -f "$vp_install_path" "$vp_install_path.old"
    fi
    # move the staging folder to the live folder and signal valheim-updater to restart the server
    mv "$vp_install_path.tmp" "$vp_install_path"
    write_restart_file updated
}


download_valheim_plus() {
    local download_url="$1"
    local updated_at="$2"
    local download_path="$vp_download_path/$vp_zipfile"
    debug "Downloading $download_url to $download_path"
    curl -L -o "$download_path" "$download_url" \
        && echo "$updated_at" > "$download_path.updated_at"
}


extract_valheim_plus() {
    cd "$vp_download_path" || fatal "Could not cd $vp_download_path"
    debug "Extracting downloaded ValheimPlus ZIP archive"
    rm -rf extracted
    mkdir -p extracted
    unzip -d extracted/ "$vp_zipfile"
}


main
